package parsebenchy

import (
	"testing"

	"google3/third_party/golang/cmp/cmp"
)

func TestSampleOutput(t *testing.T) {
	sampleOutput := `
(Generated by http://go/benchy. Settings: --runs 5 --benchtime 0.5s --reference "srcfs" --adb --config "release" --perf_counters "CPU-CYCLES,CACHE-MISSES,BRANCH-MISSES" --copt "-gmlt" --copt "-fno-omit-frame-pointer" --copt "-DGOOGLE_COMMANDLINEFLAGS_FULL_API=1" --extra_blaze_arg "--embed_changelist=none" --extra_blaze_arg "--config=android_arm64-v8a" --extra_blaze_arg "--dynamic_mode=off" --extra_blaze_arg "--features=-fully_strip" --extra_blaze_arg "--android_ndk_min_sdk_version=26" --benchmark_filter "Upb_FileDesc")

name                                     old cpu/op   new cpu/op   delta
BM_Parse_Upb_FileDesc<UseArena, Copy>      9.23µs ± 2%  8.59µs ± 4%  -6.92%  (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<UseArena, Alias>     8.11µs ± 3%  7.57µs ± 4%  -6.76%  (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<InitBlock, Copy>     8.50µs ± 3%  7.85µs ± 4%  -7.66%  (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<InitBlock, Alias>    7.54µs ± 4%  7.02µs ± 5%  -6.91%  (p=0.008 n=5+5)

name                                     old time/op           new time/op           delta
BM_Parse_Upb_FileDesc<UseArena, Copy>      9.26µs ± 2%           8.62µs ± 4%  -6.94%          (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<UseArena, Alias>     8.14µs ± 3%           7.58µs ± 4%  -6.79%          (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<InitBlock, Copy>     8.52µs ± 3%           7.87µs ± 4%  -7.65%          (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<InitBlock, Alias>    7.56µs ± 4%           7.04µs ± 5%  -6.91%          (p=0.008 n=5+5)

name                                     old CPU-CYCLES/op     new CPU-CYCLES/op     delta
BM_Parse_Upb_FileDesc<UseArena, Copy>        0.00 ±NaN%            0.00 ±NaN%    ~     (all samples are equal)
BM_Parse_Upb_FileDesc<UseArena, Alias>       0.00 ±NaN%            0.00 ±NaN%    ~     (all samples are equal)
BM_Parse_Upb_FileDesc<InitBlock, Copy>       0.00 ±NaN%            0.00 ±NaN%    ~     (all samples are equal)
BM_Parse_Upb_FileDesc<InitBlock, Alias>      0.00 ±NaN%            0.00 ±NaN%    ~     (all samples are equal)

name                                     old peak-mem(Bytes)/op  new peak-mem(Bytes)/op  delta
BM_Parse_Upb_FileDesc<UseArena, Copy>      43.7k ± 0%              43.7k ± 0%    ~     (all samples are equal)
BM_Parse_Upb_FileDesc<UseArena, Alias>     43.7k ± 0%              43.7k ± 0%    ~     (all samples are equal)

name                                     old speed             new speed             delta
BM_Parse_Upb_FileDesc<UseArena, Copy>     815MB/s ± 2%          876MB/s ± 4%  +7.51%          (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<UseArena, Alias>    927MB/s ± 3%          995MB/s ± 4%  +7.27%          (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<InitBlock, Copy>    885MB/s ± 3%          959MB/s ± 4%  +8.31%          (p=0.008 n=5+5)
BM_Parse_Upb_FileDesc<InitBlock, Alias>  1.00GB/s ± 4%         1.07GB/s ± 5%  +7.46%          (p=0.008 n=5+5)`

	m, err := ParseBenchyOutput(sampleOutput)
	if err != nil {
		t.Errorf("parseBenchyOutput(%s) failed: %v", sampleOutput, err)
	}
	want := &Metrics{
		"cpu": Result{
			"BM_Parse_Upb_FileDesc<UseArena, Copy>":   {Old: "9.23µs ± 2%", New: "8.59µs ± 4%", Delta: "-6.92%"},
			"BM_Parse_Upb_FileDesc<UseArena, Alias>":  {Old: "8.11µs ± 3%", New: "7.57µs ± 4%", Delta: "-6.76%"},
			"BM_Parse_Upb_FileDesc<InitBlock, Copy>":  {Old: "8.50µs ± 3%", New: "7.85µs ± 4%", Delta: "-7.66%"},
			"BM_Parse_Upb_FileDesc<InitBlock, Alias>": {Old: "7.54µs ± 4%", New: "7.02µs ± 5%", Delta: "-6.91%"},
		},
		"time": Result{
			"BM_Parse_Upb_FileDesc<UseArena, Copy>":   {Old: "9.26µs ± 2%", New: "8.62µs ± 4%", Delta: "-6.94%"},
			"BM_Parse_Upb_FileDesc<UseArena, Alias>":  {Old: "8.14µs ± 3%", New: "7.58µs ± 4%", Delta: "-6.79%"},
			"BM_Parse_Upb_FileDesc<InitBlock, Copy>":  {Old: "8.52µs ± 3%", New: "7.87µs ± 4%", Delta: "-7.65%"},
			"BM_Parse_Upb_FileDesc<InitBlock, Alias>": {Old: "7.56µs ± 4%", New: "7.04µs ± 5%", Delta: "-6.91%"},
		},
		"CPU-CYCLES": Result{
			"BM_Parse_Upb_FileDesc<UseArena, Copy>":   {Old: "0.00 ±NaN%", New: "0.00 ±NaN%", Delta: "~"},
			"BM_Parse_Upb_FileDesc<InitBlock, Alias>": {Old: "0.00 ±NaN%", New: "0.00 ±NaN%", Delta: "~"},
			"BM_Parse_Upb_FileDesc<InitBlock, Copy>":  {Old: "0.00 ±NaN%", New: "0.00 ±NaN%", Delta: "~"},
			"BM_Parse_Upb_FileDesc<UseArena, Alias>":  {Old: "0.00 ±NaN%", New: "0.00 ±NaN%", Delta: "~"},
		},
		"peak-mem(Bytes)": {
			"BM_Parse_Upb_FileDesc<UseArena, Alias>": {Old: "43.7k ± 0%", New: "43.7k ± 0%", Delta: "~"},
			"BM_Parse_Upb_FileDesc<UseArena, Copy>":  {Old: "43.7k ± 0%", New: "43.7k ± 0%", Delta: "~"},
		},
		"speed": Result{
			"BM_Parse_Upb_FileDesc<UseArena, Copy>":   {Old: "815MB/s ± 2%", New: "876MB/s ± 4%", Delta: "+7.51%"},
			"BM_Parse_Upb_FileDesc<UseArena, Alias>":  {Old: "927MB/s ± 3%", New: "995MB/s ± 4%", Delta: "+7.27%"},
			"BM_Parse_Upb_FileDesc<InitBlock, Copy>":  {Old: "885MB/s ± 3%", New: "959MB/s ± 4%", Delta: "+8.31%"},
			"BM_Parse_Upb_FileDesc<InitBlock, Alias>": {Old: "1.00GB/s ± 4%", New: "1.07GB/s ± 5%", Delta: "+7.46%"},
		},
	}
	if diff := cmp.Diff(want, m); diff != "" {
		t.Errorf("parseBenchyOutput(%s) returned unexpected diff (-want +got):\n%s", sampleOutput, diff)
	}
}

func TestParseBenchyValue(t *testing.T) {
	tests := []struct {
		name string
		data string
		want float64
	}{
		{
			data: "123 ± 20%",
			want: 123.0,
		},
		{
			data: "65.5k ± 1%",
			want: 65500.0,
		},
		{
			data: "0.00 ±NaN%",
			want: 0.0,
		},
	}
	for _, tc := range tests {
		got, err := ParseBenchyValue(tc.data)
		if err != nil {
			t.Errorf("ParseBenchyValue(%s) failed: %v", tc.data, err)
		}
		if got != tc.want {
			t.Errorf("ParseBenchyValue(%s) = %f, want %f", tc.data, got, tc.want)
		}
	}
}
