files = Dir.glob('ext/**/*.c')
classes = {}
MethodDefn = Struct.new(:name, :body) do
  def params
    params = body.scan(/@param (\S+) /).map { |p| p[0]}
    defaults = body.scan(/@paramdefault (\S+) (\S+)/).map { |p| [p[0], p[1]]}.to_h
    params = params.map { |p| p == 'kwargs' ? '**kwargs' : p }
    params = params.map { |p| defaults[p] ? "#{p}=#{defaults[p]}" : p }
    if body.include?('@yield')
      params.push('&block')
    end
    params
  end

end
Defn = Struct.new(:name, :instance_meths, :class_meths, :body) do
  def initialize(*args, **kwargs)
    super
    self.instance_meths ||= []
    self.class_meths ||= []
  end
end

files.each do |file|
  defs = File.read(file).scan(/ruby-doc:(.*?)\n(.*?)\*\//m)
  defs.each do |definition|
    name = definition[0].strip
    body = definition[1].strip.
      gsub(/^\s*\*/, '').
      gsub(/\n/m, "\n  # ").strip
    if name.include?('.')
      klass, method_name = name.split('.')
      method = MethodDefn.new(name: method_name, body: body)
      classes[klass] ||= Defn.new(name: klass)
      classes[klass].class_meths.push(method)
    elsif name.include?('#')
      klass, method_name = name.split('#')
      method = MethodDefn.new(name: method_name, body: body)
      classes[klass] ||= Defn.new(name: klass)
      classes[klass].instance_meths.push(method)
    else
      classes[name] = Defn.new(name: name, body: body)
    end
  end
end

# copied from ActiveSupport::Inflector
def underscore(str)
  regex = /(?:(?<=([A-Za-z\d]))|\b)((?=a)b)(?=\b|[^a-z])/
  str.gsub(regex) { "#{$1 && '_' }#{$2.downcase}" }.
    gsub(/([A-Z])(?=[A-Z][a-z])|([a-z\d])(?=[A-Z])/) { ($1 || $2) << "_" }.
    downcase
end


classes.each do |name, defn|
  file = File.join('lib/stubs', "#{underscore(name)}.rb")
  File.open(file, 'w') do |f|
    f.puts "# This file was generated by generate_stubs.rb"
    f.puts "# Do not edit this file directly."
    f.puts
    f.puts defn.body.gsub('  #', '#') if defn.body
    f.puts "class Google::Protobuf::#{name}"
    f.puts
    defn.instance_meths.each do |meth|
      args = meth.params.any? ? "(#{meth.params.join(', ')})" : ''
      f.puts "  #{meth.body}"
      f.puts "  def #{meth.name}#{args}; end"
      f.puts
    end
    defn.class_meths.each do |meth|
      args = meth.params.any? ? "(#{meth.params.join(', ')})" : ''
      f.puts "  #{meth.body}"
      f.puts "  def self.#{meth.name}#{args}; end"
      f.puts
    end
    f.puts "end # class Google::Protobuf::#{name}"
  end
end
