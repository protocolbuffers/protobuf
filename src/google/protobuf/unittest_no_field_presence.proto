// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// A proto file used to test a message type with no explicit field presence.

edition = "2023";

// Treat all fields as implicit present by default (proto3 behavior).
option features.field_presence = IMPLICIT;

// We want to test embedded proto2 messages, so include some proto2 types.
package proto2_nofieldpresence_unittest;

import "google/protobuf/unittest.proto";

// This proto includes every type of field in both singular and repeated
// forms.
message TestAllTypes {
  message NestedMessage {
    int32 bb = 1;
  }

  enum NestedEnum {
    FOO = 0;
    BAR = 1;
    BAZ = 2;
  }

  // Singular
  // TODO: remove 'optional' labels as soon as CL 69188077 is LGTM'd to make
  // 'optional' optional.
  int32 optional_int32 = 1;
  int64 optional_int64 = 2;
  uint32 optional_uint32 = 3;
  uint64 optional_uint64 = 4;
  sint32 optional_sint32 = 5;
  sint64 optional_sint64 = 6;
  fixed32 optional_fixed32 = 7;
  fixed64 optional_fixed64 = 8;
  sfixed32 optional_sfixed32 = 9;
  sfixed64 optional_sfixed64 = 10;
  float optional_float = 11;
  double optional_double = 12;
  bool optional_bool = 13;
  string optional_string = 14;
  bytes optional_bytes = 15;

  NestedMessage optional_nested_message = 18;
  ForeignMessage optional_foreign_message = 19;
  proto2_unittest.TestAllTypes optional_proto2_message = 20;

  NestedEnum optional_nested_enum = 21;
  ForeignEnum optional_foreign_enum = 22;
  // N.B.: proto2-enum-type fields not allowed, because their default values
  // might not be zero.
  // optional proto2_unittest.ForeignEnum          optional_proto2_enum     =
  // 23;

  string optional_string_piece = 24 [ctype = STRING_PIECE];
  string optional_cord = 25 [ctype = CORD];

  NestedMessage optional_lazy_message = 30 [lazy = true];

  // Repeated
  repeated int32 repeated_int32 = 31;
  repeated int64 repeated_int64 = 32;
  repeated uint32 repeated_uint32 = 33;
  repeated uint64 repeated_uint64 = 34;
  repeated sint32 repeated_sint32 = 35;
  repeated sint64 repeated_sint64 = 36;
  repeated fixed32 repeated_fixed32 = 37;
  repeated fixed64 repeated_fixed64 = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated float repeated_float = 41;
  repeated double repeated_double = 42;
  repeated bool repeated_bool = 43;
  repeated string repeated_string = 44;
  repeated bytes repeated_bytes = 45;

  repeated NestedMessage repeated_nested_message = 48;
  repeated ForeignMessage repeated_foreign_message = 49;
  repeated proto2_unittest.TestAllTypes repeated_proto2_message = 50;

  repeated NestedEnum repeated_nested_enum = 51;
  repeated ForeignEnum repeated_foreign_enum = 52;

  repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  repeated string repeated_cord = 55 [ctype = CORD];

  repeated NestedMessage repeated_lazy_message = 57;

  oneof oneof_field {
    uint32 oneof_uint32 = 111;
    NestedMessage oneof_nested_message = 112;
    string oneof_string = 113;
    NestedEnum oneof_enum = 114;
  }
}

message TestAllMapTypes {
  map<int32, bytes> map_int32_bytes = 1;
  map<int32, ForeignEnum> map_int32_foreign_enum = 2;
  map<int32, ForeignMessage> map_int32_foreign_message = 3;
  map<int32, ExplicitForeignMessage> map_int32_explicit_foreign_message = 4;
}

message TestProto2Required {
  proto2_unittest.TestRequired proto2 = 1;
}

// Define these after TestAllTypes to make sure the compiler can handle
// that.
message ForeignMessage {
  int32 c = 1;
}

// Same as ForeignMessage, but all fields have explicit presence.
// It can be useful for testing explicit-implicit presence interop behaviour.
message ExplicitForeignMessage {
  int32 c = 1 [features.field_presence = EXPLICIT];
}

enum ForeignEnum {
  FOREIGN_FOO = 0;
  FOREIGN_BAR = 1;
  FOREIGN_BAZ = 2;
}
